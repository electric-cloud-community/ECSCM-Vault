# -*-Perl-*-

# ec_setup.ntest -
#
# Exercise the ec_setup script for the plugin.
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved

use strict;
use warnings;
use ECTest;

initCommander();

my $N = $adminSession;
my $pluginKey = "ECSCM-Vault";
my $xpath = $N->getPlugin($pluginKey);
my $pluginName = $xpath->findvalue("//pluginName")->value;

#-------------------------------------------------------------------------------
# Test permissions and visibility, which should be set regardless of whether the
# plugin is promoted or not.
#-------------------------------------------------------------------------------
ntest "install", {}, sub {
    # Start out with the demoted plugin
    assertOK($N->promotePlugin($pluginName, {promoted => 0}));

    # Verify visibility of the project
    my $projPath = "/projects/$pluginName";
    assertOK($xpath = $N->getProperty("$projPath/ec_visibility"),
             "project visibility is set");
    assertEq("pickListOnly", $xpath->findvalue("//value"),
             "pickListOnly visibility for project");

    # Verify permissions and visibility for the CreateConfiguration procedure
    my $procsPath = "$projPath/procedures";
    my $procName = "CreateConfiguration";
    assertOK($xpath = $N->getProperty("$procsPath/$procName/ec_visibility"),
             "$procName visibility is set");
    assertEq("private", $xpath->findvalue("//value"),
             "private visibility for $procName");

    my $adminGroup = 'SCMAdmins';
    assertOK($xpath = $N->getAclEntry("group", $adminGroup,
                                      {projectName => $pluginName,
                                       procedureName => $procName}),
             "$procName ACL entry exists");
    assertEq("inherit", $xpath->findvalue("//readPrivilege"),
             "$procName ACL entry read");
    assertEq("inherit", $xpath->findvalue("//modifyPrivilege"),
             "$procName ACL entry modify");
    assertEq("allow", $xpath->findvalue("//executePrivilege"),
             "$procName ACL entry execute");
    assertEq("inherit", $xpath->findvalue("//changePermissionsPrivilege"),
             "$procName ACL entry changePermissions");

    # Verify permissions and visibility for the CheckoutCode procedure
    $procName = "CheckoutCode";
    $xpath = $N->getProperty("$procsPath/$procName/ec_visibility");
    assertEq("NoSuchProperty", $xpath->findvalue("//code"),
             "default visibility for $procName");

    my $everyoneGroup = 'Everyone';
    assertOK($xpath = $N->getAclEntry("group", $everyoneGroup,
                                      {projectName => $pluginName,
                                       procedureName => $procName}),
             "$procName ACL entry exists");
    assertEq("inherit", $xpath->findvalue("//readPrivilege"),
             "$procName ACL entry read");
    assertEq("inherit", $xpath->findvalue("//modifyPrivilege"),
             "$procName ACL entry modify");
    assertEq("allow", $xpath->findvalue("//executePrivilege"),
             "$procName ACL entry execute");
    assertEq("inherit", $xpath->findvalue("//changePermissionsPrivilege"),
             "$procName ACL entry changePermissions");

    # Verify permissions and visibility for the Preflight procedure
    $procName = "Preflight";
    $xpath = $N->getProperty("$procsPath/$procName/ec_visibility");
    assertEq("private", $xpath->findvalue("//value"),
             "default visibility for $procName");

    assertOK($xpath = $N->getAclEntry("group", $everyoneGroup,
                                      {projectName => $pluginName,
                                       procedureName => $procName}),
             "$procName ACL entry exists");
    assertEq("inherit", $xpath->findvalue("//readPrivilege"),
             "$procName ACL entry read");
    assertEq("inherit", $xpath->findvalue("//modifyPrivilege"),
             "$procName ACL entry modify");
    assertEq("allow", $xpath->findvalue("//executePrivilege"),
             "$procName ACL entry execute");
    assertEq("inherit", $xpath->findvalue("//changePermissionsPrivilege"),
             "$procName ACL entry changePermissions");

    # Verify permissions and visibility for the updateLastGoodAndLastCompleted
    # procedure
    $procName = "updateLastGoodAndLastCompleted";
    $xpath = $N->getProperty("$procsPath/$procName/ec_visibility");
    assertEq("NoSuchProperty", $xpath->findvalue("//code"),
             "default visibility for $procName");

    assertOK($xpath = $N->getAclEntry("group", $everyoneGroup,
                                      {projectName => $pluginName,
                                       procedureName => $procName}),
             "$procName ACL entry exists");
    assertEq("inherit", $xpath->findvalue("//readPrivilege"),
             "$procName ACL entry read");
    assertEq("inherit", $xpath->findvalue("//modifyPrivilege"),
             "$procName ACL entry modify");
    assertEq("allow", $xpath->findvalue("//executePrivilege"),
             "$procName ACL entry execute");
    assertEq("inherit", $xpath->findvalue("//changePermissionsPrivilege"),
             "$procName ACL entry changePermissions");

    # Verify visibility for the getSCMTag procedure (only used for testing)
    $procName = "getSCMTag";
    assertOK($xpath = $N->getProperty("$procsPath/$procName/ec_visibility"),
             "$procName visibility is set");
    assertEq("private", $xpath->findvalue("//value"),
             "private visibility for $procName");
};

#-------------------------------------------------------------------------------
# Test promote & demote behavior.
#-------------------------------------------------------------------------------
ntest "promote", {}, sub {
    # Start out with the demoted plugin
    assertOK($N->promotePlugin($pluginName, {promoted => 0}));
    
    # Make sure the plugin's ec_setup script exists
    assertOK($xpath = $N->getProperty("/projects/$pluginName/ec_setup",
                                      {expand => 0}),
             "ec_setup property exists");
    assertNe("", $xpath->findvalue("//value")->value, 
             "ec_setup script not empty");

    # Promote the plugin
    assertOK($N->promotePlugin($pluginName));
    
    # Verify that the type was registered with ECSCM
    my $scmTypes = "/plugins/ECSCM/project/scm_types";
    my $typeName = "Vault";
    assertOK($xpath = $N->getProperty("$scmTypes/$pluginKey"), 
             "type property exists");
    assertEq($typeName, $xpath->findvalue("//value"), "$typeName type");

    # Verify that the plugin's project principal received execute access to the
    # ECSCM project
    my $projPrincipal = "project: $pluginName";
    my $ecscmProj = '$[/plugins/ECSCM/project]';
    assertOK($xpath = $N->getAclEntry("user", $projPrincipal,
                                      {projectName => $ecscmProj}),
             "ECSCM ACL entry exists");
    assertEq("inherit", $xpath->findvalue("//readPrivilege"), 
             "ECSCM ACL entry read");
    assertEq("inherit", $xpath->findvalue("//modifyPrivilege"), 
             "ECSCM ACL entry modify");
    assertEq("allow", $xpath->findvalue("//executePrivilege"), 
             "ECSCM ACL entry execute");
    assertEq("inherit", $xpath->findvalue("//changePermissionsPrivilege"), 
             "ECSCM ACL entry changePermissions");

    # Demote the plugin
    assertOK($N->promotePlugin($pluginName, {promoted => 0}));

    # Verify that the type is no longer registered
    $xpath = $N->getProperty("$scmTypes/$pluginKey");
    assertEq("NoSuchProperty", $xpath->findvalue("//code"), 
             "type property gone");

    # Verify that the plugin's project principal no longer has execute access to
    # the ECSCM project
    $xpath = $N->getAclEntry("user", $projPrincipal, 
                             {projectName => $ecscmProj});
    assertEq("NoSuchAclEntry", $xpath->findvalue("//code"), 
             "ECSCM ACL entry gone");
};

# Ensure the plugin is promoted for later tests
$N->promotePlugin($pluginName);

1;
